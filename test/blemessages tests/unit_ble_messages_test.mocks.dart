// Mocks generated by Mockito 5.4.0 from annotations
// in ble_app/test/blemessages%20tests/unit_ble_messages.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_blue_plus/flutter_blue_plus.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDeviceIdentifier_0 extends _i1.SmartFake
    implements _i2.DeviceIdentifier {
  _FakeDeviceIdentifier_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBluetoothDevice_1 extends _i1.SmartFake
    implements _i2.BluetoothDevice {
  _FakeBluetoothDevice_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAdvertisementData_2 extends _i1.SmartFake
    implements _i2.AdvertisementData {
  _FakeAdvertisementData_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_3 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGuid_4 extends _i1.SmartFake implements _i2.Guid {
  _FakeGuid_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCharacteristicProperties_5 extends _i1.SmartFake
    implements _i2.CharacteristicProperties {
  _FakeCharacteristicProperties_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FlutterBluePlus].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterBluePlus extends _i1.Mock implements _i2.FlutterBluePlus {
  MockFlutterBluePlus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LogLevel get logLevel => (super.noSuchMethod(
        Invocation.getter(#logLevel),
        returnValue: _i2.LogLevel.emergency,
      ) as _i2.LogLevel);
  @override
  _i3.Future<bool> get isAvailable => (super.noSuchMethod(
        Invocation.getter(#isAvailable),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<String> get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<bool> get isOn => (super.noSuchMethod(
        Invocation.getter(#isOn),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Stream<bool> get isScanning => (super.noSuchMethod(
        Invocation.getter(#isScanning),
        returnValue: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);
  @override
  _i3.Stream<List<_i2.ScanResult>> get scanResults => (super.noSuchMethod(
        Invocation.getter(#scanResults),
        returnValue: _i3.Stream<List<_i2.ScanResult>>.empty(),
      ) as _i3.Stream<List<_i2.ScanResult>>);
  @override
  _i3.Stream<_i2.BluetoothState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i3.Stream<_i2.BluetoothState>.empty(),
      ) as _i3.Stream<_i2.BluetoothState>);
  @override
  _i3.Future<List<_i2.BluetoothDevice>> get connectedDevices =>
      (super.noSuchMethod(
        Invocation.getter(#connectedDevices),
        returnValue: _i3.Future<List<_i2.BluetoothDevice>>.value(
            <_i2.BluetoothDevice>[]),
      ) as _i3.Future<List<_i2.BluetoothDevice>>);
  @override
  _i3.Future<List<_i2.BluetoothDevice>> get bondedDevices =>
      (super.noSuchMethod(
        Invocation.getter(#bondedDevices),
        returnValue: _i3.Future<List<_i2.BluetoothDevice>>.value(
            <_i2.BluetoothDevice>[]),
      ) as _i3.Future<List<_i2.BluetoothDevice>>);
  @override
  _i3.Future<bool> turnOn() => (super.noSuchMethod(
        Invocation.method(
          #turnOn,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> turnOff() => (super.noSuchMethod(
        Invocation.method(
          #turnOff,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Stream<_i2.ScanResult> scan({
    _i2.ScanMode? scanMode = _i2.ScanMode.lowLatency,
    List<_i2.Guid>? withServices = const [],
    List<_i2.Guid>? withDevices = const [],
    List<String>? macAddresses = const [],
    Duration? timeout,
    bool? allowDuplicates = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scan,
          [],
          {
            #scanMode: scanMode,
            #withServices: withServices,
            #withDevices: withDevices,
            #macAddresses: macAddresses,
            #timeout: timeout,
            #allowDuplicates: allowDuplicates,
          },
        ),
        returnValue: _i3.Stream<_i2.ScanResult>.empty(),
      ) as _i3.Stream<_i2.ScanResult>);
  @override
  _i3.Future<dynamic> startScan({
    _i2.ScanMode? scanMode = _i2.ScanMode.lowLatency,
    List<_i2.Guid>? withServices = const [],
    List<_i2.Guid>? withDevices = const [],
    List<String>? macAddresses = const [],
    Duration? timeout,
    bool? allowDuplicates = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startScan,
          [],
          {
            #scanMode: scanMode,
            #withServices: withServices,
            #withDevices: withDevices,
            #macAddresses: macAddresses,
            #timeout: timeout,
            #allowDuplicates: allowDuplicates,
          },
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> stopScan() => (super.noSuchMethod(
        Invocation.method(
          #stopScan,
          [],
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
  @override
  void setLogLevel(_i2.LogLevel? level) => super.noSuchMethod(
        Invocation.method(
          #setLogLevel,
          [level],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BluetoothDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothDevice extends _i1.Mock implements _i2.BluetoothDevice {
  MockBluetoothDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DeviceIdentifier get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#id),
        ),
      ) as _i2.DeviceIdentifier);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
      ) as String);
  @override
  _i2.BluetoothDeviceType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i2.BluetoothDeviceType.unknown,
      ) as _i2.BluetoothDeviceType);
  @override
  _i3.Stream<bool> get isDiscoveringServices => (super.noSuchMethod(
        Invocation.getter(#isDiscoveringServices),
        returnValue: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);
  @override
  _i3.Stream<List<_i2.BluetoothService>> get services => (super.noSuchMethod(
        Invocation.getter(#services),
        returnValue: _i3.Stream<List<_i2.BluetoothService>>.empty(),
      ) as _i3.Stream<List<_i2.BluetoothService>>);
  @override
  _i3.Stream<_i2.BluetoothDeviceState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i3.Stream<_i2.BluetoothDeviceState>.empty(),
      ) as _i3.Stream<_i2.BluetoothDeviceState>);
  @override
  _i3.Stream<int> get mtu => (super.noSuchMethod(
        Invocation.getter(#mtu),
        returnValue: _i3.Stream<int>.empty(),
      ) as _i3.Stream<int>);
  @override
  _i3.Future<bool> get canSendWriteWithoutResponse => (super.noSuchMethod(
        Invocation.getter(#canSendWriteWithoutResponse),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<void> connect({
    Duration? timeout,
    bool? autoConnect = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {
            #timeout: timeout,
            #autoConnect: autoConnect,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> pair() => (super.noSuchMethod(
        Invocation.method(
          #pair,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> clearGattCache() => (super.noSuchMethod(
        Invocation.method(
          #clearGattCache,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<dynamic> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
  @override
  _i3.Future<List<_i2.BluetoothService>> discoverServices() =>
      (super.noSuchMethod(
        Invocation.method(
          #discoverServices,
          [],
        ),
        returnValue: _i3.Future<List<_i2.BluetoothService>>.value(
            <_i2.BluetoothService>[]),
      ) as _i3.Future<List<_i2.BluetoothService>>);
  @override
  _i3.Future<int> requestMtu(int? desiredMtu) => (super.noSuchMethod(
        Invocation.method(
          #requestMtu,
          [desiredMtu],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<int> readRssi() => (super.noSuchMethod(
        Invocation.method(
          #readRssi,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}

/// A class which mocks [ScanResult].
///
/// See the documentation for Mockito's code generation for more information.
class MockScanResult extends _i1.Mock implements _i2.ScanResult {
  MockScanResult() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BluetoothDevice get device => (super.noSuchMethod(
        Invocation.getter(#device),
        returnValue: _FakeBluetoothDevice_1(
          this,
          Invocation.getter(#device),
        ),
      ) as _i2.BluetoothDevice);
  @override
  _i2.AdvertisementData get advertisementData => (super.noSuchMethod(
        Invocation.getter(#advertisementData),
        returnValue: _FakeAdvertisementData_2(
          this,
          Invocation.getter(#advertisementData),
        ),
      ) as _i2.AdvertisementData);
  @override
  int get rssi => (super.noSuchMethod(
        Invocation.getter(#rssi),
        returnValue: 0,
      ) as int);
  @override
  DateTime get timeStamp => (super.noSuchMethod(
        Invocation.getter(#timeStamp),
        returnValue: _FakeDateTime_3(
          this,
          Invocation.getter(#timeStamp),
        ),
      ) as DateTime);
}

/// A class which mocks [BluetoothService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothService extends _i1.Mock implements _i2.BluetoothService {
  MockBluetoothService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Guid get uuid => (super.noSuchMethod(
        Invocation.getter(#uuid),
        returnValue: _FakeGuid_4(
          this,
          Invocation.getter(#uuid),
        ),
      ) as _i2.Guid);
  @override
  _i2.DeviceIdentifier get deviceId => (super.noSuchMethod(
        Invocation.getter(#deviceId),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#deviceId),
        ),
      ) as _i2.DeviceIdentifier);
  @override
  bool get isPrimary => (super.noSuchMethod(
        Invocation.getter(#isPrimary),
        returnValue: false,
      ) as bool);
  @override
  List<_i2.BluetoothCharacteristic> get characteristics => (super.noSuchMethod(
        Invocation.getter(#characteristics),
        returnValue: <_i2.BluetoothCharacteristic>[],
      ) as List<_i2.BluetoothCharacteristic>);
  @override
  List<_i2.BluetoothService> get includedServices => (super.noSuchMethod(
        Invocation.getter(#includedServices),
        returnValue: <_i2.BluetoothService>[],
      ) as List<_i2.BluetoothService>);
}

/// A class which mocks [BluetoothCharacteristic].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothCharacteristic extends _i1.Mock
    implements _i2.BluetoothCharacteristic {
  MockBluetoothCharacteristic() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Guid get uuid => (super.noSuchMethod(
        Invocation.getter(#uuid),
        returnValue: _FakeGuid_4(
          this,
          Invocation.getter(#uuid),
        ),
      ) as _i2.Guid);
  @override
  _i2.DeviceIdentifier get deviceId => (super.noSuchMethod(
        Invocation.getter(#deviceId),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#deviceId),
        ),
      ) as _i2.DeviceIdentifier);
  @override
  _i2.Guid get serviceUuid => (super.noSuchMethod(
        Invocation.getter(#serviceUuid),
        returnValue: _FakeGuid_4(
          this,
          Invocation.getter(#serviceUuid),
        ),
      ) as _i2.Guid);
  @override
  _i2.CharacteristicProperties get properties => (super.noSuchMethod(
        Invocation.getter(#properties),
        returnValue: _FakeCharacteristicProperties_5(
          this,
          Invocation.getter(#properties),
        ),
      ) as _i2.CharacteristicProperties);
  @override
  List<_i2.BluetoothDescriptor> get descriptors => (super.noSuchMethod(
        Invocation.getter(#descriptors),
        returnValue: <_i2.BluetoothDescriptor>[],
      ) as List<_i2.BluetoothDescriptor>);
  @override
  bool get isNotifying => (super.noSuchMethod(
        Invocation.getter(#isNotifying),
        returnValue: false,
      ) as bool);
  @override
  _i3.Stream<List<int>> get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _i3.Stream<List<int>>.empty(),
      ) as _i3.Stream<List<int>>);
  @override
  List<int> get lastValue => (super.noSuchMethod(
        Invocation.getter(#lastValue),
        returnValue: <int>[],
      ) as List<int>);
  @override
  _i3.Stream<List<int>> get onValueChangedStream => (super.noSuchMethod(
        Invocation.getter(#onValueChangedStream),
        returnValue: _i3.Stream<List<int>>.empty(),
      ) as _i3.Stream<List<int>>);
  @override
  _i3.Future<List<int>> read() => (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);
  @override
  _i3.Future<Null> write(
    List<int>? value, {
    bool? withoutResponse = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [value],
          {#withoutResponse: withoutResponse},
        ),
        returnValue: _i3.Future<Null>.value(),
      ) as _i3.Future<Null>);
  @override
  _i3.Future<bool> setNotifyValue(bool? notify) => (super.noSuchMethod(
        Invocation.method(
          #setNotifyValue,
          [notify],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
